2019/11/16 #js
htmlエンティティをデコードはDOMを使うと簡単らしい。&amp;←こいうの。
function decodeHtml(html) {
    var txt = document.createElement("textarea");
    txt.innerHTML = html;
    return txt.value;
}

JSZip.jsの読み込みに苦労うした。JsZipとタイポしてたから余計にきつかった。
user.jsだから余計に大変でもあった。user.jsの @requireで読み込んだ。
この場合、メインもreuireで読み込まなければ同じスコープにならない。
commonjsのimportは対応してないぽい？

2019/11/18
function hoge(){}
hoge.prototype.fn=function(){}
console.log(hoge.fn) //undefined
//const hoge=functionでも同じ、関数にprototypeつけれない。プロパティはできる。
けどfunc＋プロパティじゃ、thisにアクセスできないから、ほぼ意味ない。

2019/11/20 #js importする場合、scriptタグにtype="module"が必要。

2019/12/03 #js arr.mapで返り値捨てるタイプで代入
arr= arr.map(val => (' '.repeat(maxlen) + val).slice(-maxlen))
// arr.map(val => val=(' '.repeat(maxlen) + val).slice(-maxlen))
//上は無理、valはobjじゃないから、参照無し、thisarray使えば出来る。

for(const [key, value] of arr.entries()) 
みたいに変換関数噛ますと、カーボンコピーだから代入は無理？

プリミティブ型を変換するのに、String(111)とかやるけど、これnewが本当は必要ぽい。
newつけたほうが速い。
嘘ちがたった。
newつけるとobject型になるし、遅い。

後ろの引数だけを使いたい、前は空にしたいときはundefined、nullじゃ無理。hoge(,1)も駄目。
hoge(undefined,10)

全角の長さを2でカウントしたい。decodeURIは空白も変換して無理そう。
正規表現で日本語を2文字に変換するのを予想。
日本語が3バイトでUTF16で処理されてるらしい。
関係で調べてると、4バイトの文字も混じってるらしく、lengthでも対応できない。
str = `𠮷野屋で𩸽頼んで𠮟られる😭`; //13文字
str.length // => 17

2019/12/05
elemment.styleはcssの情報は無い。csstextの情報はある。凄いテキスト量。
なので、cssセレクタでcss設定されたものは探せない。

array.map array.forEach がほぼ同じ過ぎる、mapは[...返り値]で配列返す。

settimeoutのthis問題、わかってるつもりで、分かってなかった。ブラックボックスだから理解しにくい。
// setTimeout(function() {this.hoge()}, 100) //this==Timeout{}で関数が見つからない
// setTimeout(()=>this.hoge(),100) //OK 行の時点でthis固定される
// setTimeout(this.hoge,100) //呼び出せるが、先でthisがTimeout{},行の時点でTimeout.fn=this.hogeされる
// setTimeout(this.hoge.bind(this),100) //OK 行の時点で、固定した関数を返す
Timeout.fn()的な実行される。this.hoge が呼べるのは、これが関数のアドレスだからだと予想。
fn=0x2342 的な。
こう見ると、アロー関数が特異なのが分かる、無名関数渡してるだけなのに。無名関数のthisを固定決定してる。
アロー関数がthisを持ってないとネットに書いてあったが。
hoge.bbb=100
hoge.aaa=(fn)=>{fn()} //fn()先のthisはhogeてthisを持てるてる？


fn(hoge)関数の受け欄はlet hoge=arg[0] に近い。thisじゃない。

2019/12/06
クラスメソッドの内に関数作り、this.xxxを見ようとしたら見れない。
イメージ的にはスコープ繋がったけど、違った。
let hoge=()=>{console.log(this.xxx)}で見れた。
アロー関数はthisを束縛するってやつ。
!(function() {log(typeof this)})() //undefined
!(() =>      {log(typeof this)})() //object
--分かりやすく
this.a = 11
let obj = {a: 22}
obj.f = () =>      {log(this.a)}; obj.f() //11
obj.f = function() {log(this.a)}; obj.f() //22
thisは毎回混乱する、設計が悪いんや！

asc desc が覚えられん、ascedは英語の「上がる」、階段を上がっていくイメージ

textフォーマット構文から、出力する処理を書いた。
最初はテンプレートリテラルぽいのを作ったけど、後ろ点で囲むと本物と混ざって混乱しそうで止めた。
fmt.replace(/\$\{.+?\}|[^$]+|\$/g, aaa)+'\n'
--次に、*hoge* みたいな奴にしてみた。エスケープでバッスラ考えたけど、苦しんで出来たけど、
汚いしバッスラのバッスラどうすんだ問題（完璧主義）で止めた。
そして閃いた、エスケープは**でええやんけ。めちゃ綺麗に書けた。
fmt.replace(/\*.*?\*|[^*]+/g, fn) + '\n'

2019/12/07
div-button1~9 で、ボタン全てにイベントつけてたが、divにつけてやると楽そうだけど失敗、
イベントの理解が低い。

div.innerHTML += "aaa" すると、divのEventListenerは残るぽいけど、中のボタンとかは消えてしまう。
htmlをテキストで弄るの駄目
div.appendChild(document.createTextNode("aaa"))

node.jsでimport使えない、--experimental-modulesのオプション＋ファイル名mjsで使える様になったけど。
とても実用的じゃない。documentも使えない、browser-envをインストールしてimportすりゃ良いらしいけど

2019/12/08
shadowDOMはappendChilは使えるが、insertElemは使えない、間に１つdiv挟めばできると思う。

2019/12/11
dom ノードと要素elemmentは別物、nodeは改行やテキストノードも含むから使いにくい。
nodeプロパティのchildrenはelementのみで使いやすい、childnodesは改行とかテキストノードも引っ張ってくる。
lastchildはノードなのでややこしい、lastElementChildがelement

document以外からのセレクタ
le=get~id(#hoge)
let.query~(#hoge)→null
let.query~(#hoge>*)→見つかる、つまり見えるけどセレクトできない。

2019/12/13
document.boy.parentNode
document.htmlElemmnt?

知らなかった。
>ES6のオブジェクトのメソッドは省略記法がある
const obj = {
    method() {
        console.log(this);
    }
}

Object.entries(obj)なのに、arr.entries()できる謎。Array.prototype.entiresがある。
arr.__proto__:Array(0).entries()がある。
arr.__proto__:Array(0).__proto__:Object()←には無い。
arr.__proto__:Array(0).__proto__:Object().constructor()←にある。
ちなみに、
arr.__proto__:Array(0).constructor()は、isArrayなどがある
constructor()系は原型から呼ばないといけないぽ。

Dateみたいに、インスタンスそのものが文字列返すとかやりたい。

2019/12/16
functionのプロパティはリファクタリング出来ない。method作りたいなら、Objectかclassにすべきか？

2019/12/18
中央画面MAX配置は
position 相対的
transform: translateX(-50%);
left: 50%;
ただ、動画を最上位MAXなら、position

2019/12/23
右クリック禁止などを無効にする一例、stopi〜は特定のeventを全て無効にするぽい。
document.addEventListener('paste', event => event.stopImmediatePropagation(), true);
document.addEventListener('contextmenu', event => event.stopImmediatePropagation(), true);
document.addEventListener('drop', event => event.stopImmediatePropagation(), true);

選択テキスト検索する機能は、selectionchangeだと連射しすぎ、mousupとかのほうが良さそう

ブラウザのalertが最前面にならないから気づかない。
window.open()で最前面出せる。通知も出来るけど、事前に設定必要で、表示も小さい。

cssでall:unsetなどはラッパー無いと無理、カーソル変更とかも全部消える。

あれば〜系はtryで囲ってエラーもみ消してええのか？
ちょっと調べてたら、負荷が大きいらしく結構おそくなるらしい。ベンチしてみたい。
//前に作ったやつ、あれば削除
// const el = qs('#aaa')
// if (el) el.remove()
try {
    qs('#aaa').remove()
} catch (error) {}